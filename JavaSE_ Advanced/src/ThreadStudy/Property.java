package ThreadStudy;

/**
 * @author MOYU
 * @File JavaSE_Study-ThreadStudy
 * @Date 2022/6/15 21:03
 **/
public class Property {
    /*
    多线程：只从软件或者硬件上实现多个线程并发执行的技术
    具有多线程能力的计算机因有硬件支持而能够在同一时间执行多个线程，提升性能
    多线程其实就是是CPU在多个线程中高速切换

    并行：同一时刻，多个指令在多个CPU上同时执行
    并发：在同一时刻，多个指令在单个CPU上交替执行

    进程：正在运行的软件----独立性，动态性，并发性
    线程：进程中的单个顺序控制流，是一条执行路径
        单线程：一个进程如果只有一条执行路径，则称为单线程----以前写的代码都是
        多线程：一个进程如果有多条执行路径，则称为多线程程序----用的app大多都是

                                      优点                                     缺点
    实现Runnable、Callable接口       扩展性强，实现接口的同时继承其它类          编程相对复杂，不能直接使用Thread类中的方法
        继承Thread类                编程比较简单，直接使用Thread中的方法       可扩展性差，不能再继承其他类

        线程调度模型：
                1.分时调度模型：所有线程轮流获得CPU的使用权，平均分配每个线程占用CPU的时间片
                2.抢占式调度模型：优先高级别线程使用CPU，优先级相同则随机一个，且优先级高的线程获得的CPU时间也相对多
        Java就是抢占式调度模型

        守护线程：当普通线程执行完毕，守护线程没必要执行了

        同步代码块：synchronized加到代码块上
                  给线程加锁，解决多线程共享数据安全问题，但是效率较低
                  指定锁对象多线程的锁对象要是唯一的、

        同步方法：synchronized加到方法上
                给方法加锁，同步方法的锁对象不能指定，只能是this

         同步静态方法：synchronized加到静态方法上
                给方法加锁，同步方法的锁对象不能指定，只能是：类名.class(即是当前字节码文件对象)

        线程的六种状态：
                    1.新建状态：NEW--创建
                    2.就绪状态：RUNNABLE--start
                    3.阻塞状态：BLOCKED--无法获得锁
                    4.等待状态：WAITING--wait
                    5.计时状态：TIMED_WAITING--sleep
                    6.结束状态：TERMINATED--全部代码执行完毕

          每个线程都有自己的线程栈，会将共享数据的变量值在栈中存储一个副本进行使用
     */
}
