package CollectionStudy.Collection.MySet.HashSet;

/**
 * @author MOYU
 * @File JavaSE_Study-Collection_Study.MySet.HashSet
 * @Date 2022/6/4 1:13
 **/
public class Property {
    /*
    哈希值：是JDk根据对象的地址或者属性值，算出来的int类型的整数
            故：同一个对象的哈希值相同
            重写HashCode方法后，根据对象属性值来计算哈希值，因此同一个对象或者属性值相同的对象哈希值相同

    注意：如果用HashSet存储自定义类，则必须重写HashCode方法

        特点：
            1.底层是哈希表
            2.不能保证存取顺序一致
            3.没有带索引的方法，所以不能使用普通for循环遍历
            4.由于是Set集合，所以元素唯一，不重复

        HashSet在1.7版本之前：
                底层：哈希表（数组+链表）
                1.HashSet默认创建16长度的数组，加载因子为0.75，数组名为table
                2.根据元素的哈希值根数组长度计算出应该存入的位置
                3.判断当前位置是否是null，如果是null直接存入
                4.如果应存入的位置不为null，表示有元素，则调用equals方法比较属性
                5.如果一样，则不存，如果不一样，则存入数组，老元素挂在新元素下面（链表）
                6.如果该位置已经有一个链表，则和整个链表元素进行比较，如有一个相同，不存；如都不同，则新元素进入数组，做链表头
                7.当数组里面（注意是数组里面，挂在某个数组元素上的链表不属于数组）存入16*0.75=12个元素时，数组会扩容到原先的两倍

        HashSet在1.8版本之后 ：
                底层：哈希表（数组+链表+红黑树）
                优化：在1.7版本的基础上，对链表进行长度监控，如果链表长度超过8时，自动转换为红黑树
     */
}
